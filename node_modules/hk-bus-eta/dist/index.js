"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchRouteUpdatedAt = exports.fetchEtaDbMd5 = exports.fetchEtaDb = exports.fetchEtas = void 0;
const kmb_1 = __importDefault(require("./kmb"));
const ctb_1 = __importDefault(require("./ctb"));
const nlb_1 = __importDefault(require("./nlb"));
const lrtfeeder_1 = __importDefault(require("./lrtfeeder"));
const gmb_1 = __importDefault(require("./gmb"));
const lightRail_1 = __importDefault(require("./lightRail"));
const mtr_1 = __importDefault(require("./mtr"));
const sunferry_1 = __importDefault(require("./sunferry"));
const fortuneferry_1 = __importDefault(require("./fortuneferry"));
const hkkf_1 = __importDefault(require("./hkkf"));
function fetchEtas({ route, stops, bound, dest, freq, seq, serviceType, co, nlbId, gtfsId, stopList, language, holidays, serviceDayMap, }) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            let _etas = [];
            for (const company_id of co) {
                if (company_id === "kmb" && stops.kmb) {
                    _etas = _etas.concat(yield (0, kmb_1.default)({
                        route,
                        stops: stops.kmb,
                        stopId: stops.kmb[seq],
                        seq,
                        co,
                        serviceType,
                        bound: bound.kmb,
                    }));
                }
                else if (company_id === "ctb" && stops.ctb) {
                    _etas = _etas.concat(yield (0, ctb_1.default)({ stopId: stops.ctb[seq], route, bound: bound.ctb, seq }));
                }
                else if (company_id === "nlb" && stops.nlb) {
                    _etas = _etas.concat(yield (0, nlb_1.default)({ stopId: stops.nlb[seq], nlbId }));
                }
                else if (company_id === "lrtfeeder" && stops.lrtfeeder) {
                    _etas = _etas.concat(yield (0, lrtfeeder_1.default)({ stopId: stops.lrtfeeder[seq], route, language }));
                }
                else if (company_id === "gmb" && stops.gmb) {
                    _etas = _etas.concat(yield (0, gmb_1.default)({ stopId: stops.gmb[seq], gtfsId, seq, bound: bound.gmb }));
                }
                else if (company_id === "lightRail" && stops.lightRail) {
                    _etas = _etas.concat(yield (0, lightRail_1.default)({ stopId: stops.lightRail[seq], route, dest }));
                }
                else if (company_id === "mtr" && stops.mtr) {
                    _etas = _etas.concat(yield (0, mtr_1.default)({
                        stopId: stops.mtr[seq],
                        route,
                        stopList,
                        bound: bound.mtr,
                    }));
                }
                else if (company_id === "fortuneferry" && stops.fortuneferry) {
                    _etas = _etas.concat(yield (0, fortuneferry_1.default)({
                        stops,
                        seq,
                        stopList,
                        freq,
                        serviceDayMap,
                        holidays,
                    }));
                }
                else if (company_id === "sunferry" && stops.sunferry) {
                    _etas = _etas.concat(yield (0, sunferry_1.default)({ route, seq, holidays, serviceDayMap, freq }));
                }
                else if (company_id === "hkkf" && stops.hkkf) {
                    _etas = _etas.concat(yield (0, hkkf_1.default)({ freq, seq, holidays, serviceDayMap }));
                }
            }
            if (_etas.some((e) => e.eta)) {
                _etas = _etas.filter((e) => e.eta);
            }
            return _etas.sort((a, b) => {
                if (!a.eta || a.eta === "")
                    return 1;
                else if (!b.eta || b.eta === "")
                    return -1;
                return a.eta < b.eta ? -1 : 1;
            });
        }
        catch (err) {
            console.error(err);
            return [];
        }
    });
}
exports.fetchEtas = fetchEtas;
function fetchEtaDb() {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch("https://data.hkbus.app/routeFareList.min.json", {
            cache: "no-store",
        })
            .then((r) => r.json())
            .catch(() => fetch("https://hkbus.github.io/hk-bus-crawling/routeFareList.min.json", {
            cache: "no-store",
        }).then((r) => r.json()));
    });
}
exports.fetchEtaDb = fetchEtaDb;
function fetchEtaDbMd5() {
    return __awaiter(this, void 0, void 0, function* () {
        return fetch("https://data.hkbus.app/routeFareList.md5", {
            cache: "no-store",
        })
            .then((r) => r.text())
            .catch(() => fetch("https://hkbus.github.io/hk-bus-crawling/routeFareList.md5", {
            cache: "no-store",
        }).then((r) => r.text()));
    });
}
exports.fetchEtaDbMd5 = fetchEtaDbMd5;
function fetchRouteUpdatedAt(route) {
    return __awaiter(this, void 0, void 0, function* () {
        const filename = `${route.route}+${route.serviceType}+${route.orig.en}+${route.dest.en}`.toUpperCase();
        return fetch(`https://data.hkbus.app/route-ts/${filename.replace(/[\\\/\:\*\?\"\<\>\|\]\']/g, "")}`)
            .then((r) => {
            if (r.ok) {
                return r.text();
            }
            throw Error("no update");
        })
            .then((r) => parseInt(r, 10) * 1000)
            .catch((e) => {
            return 0;
        });
    });
}
exports.fetchRouteUpdatedAt = fetchRouteUpdatedAt;
__exportStar(require("./journeyTime"), exports);
//# sourceMappingURL=index.js.map